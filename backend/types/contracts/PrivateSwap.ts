/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrivateSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLastQuoteHandle"
      | "getPrices"
      | "initPrices"
      | "protocolId"
      | "quoteAtoB"
      | "quoteBtoA"
      | "setPrices"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PricesUpdated" | "Quoted"): EventFragment;

  encodeFunctionData(
    functionFragment: "getLastQuoteHandle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initPrices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAtoB",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBtoA",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLastQuoteHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteAtoB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteBtoA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
}

export namespace PricesUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuotedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateSwap extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateSwap;
  waitForDeployment(): Promise<this>;

  interface: PrivateSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLastQuoteHandle: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getPrices: TypedContractMethod<[], [[string, string]], "view">;

  initPrices: TypedContractMethod<
    [priceAtoB_1e4: BigNumberish, priceBtoA_1e4: BigNumberish],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  quoteAtoB: TypedContractMethod<
    [
      amountIn_encrypted: BytesLike,
      maxSlippagePpm_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  quoteBtoA: TypedContractMethod<
    [
      amountIn_encrypted: BytesLike,
      maxSlippagePpm_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  setPrices: TypedContractMethod<
    [
      priceAtoB_encrypted: BytesLike,
      priceBtoA_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLastQuoteHandle"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getPrices"
  ): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "initPrices"
  ): TypedContractMethod<
    [priceAtoB_1e4: BigNumberish, priceBtoA_1e4: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteAtoB"
  ): TypedContractMethod<
    [
      amountIn_encrypted: BytesLike,
      maxSlippagePpm_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteBtoA"
  ): TypedContractMethod<
    [
      amountIn_encrypted: BytesLike,
      maxSlippagePpm_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrices"
  ): TypedContractMethod<
    [
      priceAtoB_encrypted: BytesLike,
      priceBtoA_encrypted: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PricesUpdated"
  ): TypedContractEvent<
    PricesUpdatedEvent.InputTuple,
    PricesUpdatedEvent.OutputTuple,
    PricesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Quoted"
  ): TypedContractEvent<
    QuotedEvent.InputTuple,
    QuotedEvent.OutputTuple,
    QuotedEvent.OutputObject
  >;

  filters: {
    "PricesUpdated()": TypedContractEvent<
      PricesUpdatedEvent.InputTuple,
      PricesUpdatedEvent.OutputTuple,
      PricesUpdatedEvent.OutputObject
    >;
    PricesUpdated: TypedContractEvent<
      PricesUpdatedEvent.InputTuple,
      PricesUpdatedEvent.OutputTuple,
      PricesUpdatedEvent.OutputObject
    >;

    "Quoted(address)": TypedContractEvent<
      QuotedEvent.InputTuple,
      QuotedEvent.OutputTuple,
      QuotedEvent.OutputObject
    >;
    Quoted: TypedContractEvent<
      QuotedEvent.InputTuple,
      QuotedEvent.OutputTuple,
      QuotedEvent.OutputObject
    >;
  };
}
